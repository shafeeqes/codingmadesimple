/*
Problem Description

A message containing letters from A-Z is being encoded to numbers using the following mapping:

 'A' -> 1
 'B' -> 2
 ...
 'Z' -> 26
Given an encoded message A containing digits, determine the total number of ways to decode it modulo 109 + 7.



Problem Constraints
1 <= |A| <= 105



Input Format
The first and the only argument is a string A.



Output Format
Return a single integer denoting the total number of ways to decode it modulo 109 + 7.



Example Input
Input 1:

 A = "8"
Input 2:

 A = "12"


Example Output
Output 1:

 1
Output 2:

 2


Example Explanation
Explanation 1:

 Given encoded message "8", it could be decoded as only "H" (8).
 The number of ways decoding "8" is 1.
Explanation 2:

 Given encoded message "12", it could be decoded as "AB" (1, 2) or "L" (12).
 The number of ways decoding "12" is 2.
*/

int Solution::numDecodings(string s) {
    int n = s.size();
    if(n<1) return 0;
        
    long int dp[n+1];
    long int M = pow(10,9)+7;
    memset(dp,0,sizeof(dp));
    //ways which we can decode empty string is 1
    dp[0] = 1;
    dp[1] = 1;
    //if the first letter of the string is 0
    if(s[0]-'0' == 0) dp[1] = 0;
    
    for(int i = 2; i <= n; i++){
        //taking the ones digit and tens digit
        int prev = s[i-2] - '0';
        int curr = s[i-1] -'0';
        
        //if current char is not 0 add to it number of ways which we can decode upto just prev char
        if(curr >= 1)
            dp[i] += dp[i-1];
        
        //if the last two digits is between A and Z then it adds (number of ways which we
        //can decode the string without these two digits) to our answer
        if(prev >0 and (prev*10 + curr) <= 26)
            dp[i] += dp[i-2];
        
        dp[i] %=  M;   
    }
     
    return dp[n];
}
